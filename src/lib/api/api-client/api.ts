/* tslint:disable */
/* eslint-disable */
/**
 * Greenhouse API
 * Greenhouse application REST API documentation.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddControlActionsToCurrentPhaseResource
 */
export interface AddControlActionsToCurrentPhaseResource {
    /**
     * 
     * @type {Array<CreateControlActionResource>}
     * @memberof AddControlActionsToCurrentPhaseResource
     */
    'controlActions'?: Array<CreateControlActionResource>;
}
/**
 * Request body to add a list of new measurements.
 * @export
 * @interface AddMeasurementsToCurrentPhaseResource
 */
export interface AddMeasurementsToCurrentPhaseResource {
    /**
     * 
     * @type {Array<CreateMeasurementResource>}
     * @memberof AddMeasurementsToCurrentPhaseResource
     */
    'measurements'?: Array<CreateMeasurementResource>;
}
/**
 * 
 * @export
 * @interface AuthenticatedUserResource
 */
export interface AuthenticatedUserResource {
    /**
     * 
     * @type {number}
     * @memberof AuthenticatedUserResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedUserResource
     */
    'username'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthenticatedUserResource
     */
    'companyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedUserResource
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface CompanyResource
 */
export interface CompanyResource {
    /**
     * 
     * @type {number}
     * @memberof CompanyResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyResource
     */
    'companyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyResource
     */
    'taxIdentificationNumber'?: number;
}
/**
 * 
 * @export
 * @interface ControlActionResource
 */
export interface ControlActionResource {
    /**
     * 
     * @type {number}
     * @memberof ControlActionResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ControlActionResource
     */
    'actuatorType'?: ControlActionResourceActuatorTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ControlActionResource
     */
    'controlActionType'?: ControlActionResourceControlActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ControlActionResource
     */
    'triggeringReason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControlActionResource
     */
    'triggeringParameterType'?: ControlActionResourceTriggeringParameterTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ControlActionResource
     */
    'triggeringMeasurementValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof ControlActionResource
     */
    'timestamp'?: string;
    /**
     * 
     * @type {number}
     * @memberof ControlActionResource
     */
    'cropPhaseId'?: number;
}

export const ControlActionResourceActuatorTypeEnum = {
    AirExtractor: 'AIR_EXTRACTOR',
    AirRecirculation: 'AIR_RECIRCULATION'
} as const;

export type ControlActionResourceActuatorTypeEnum = typeof ControlActionResourceActuatorTypeEnum[keyof typeof ControlActionResourceActuatorTypeEnum];
export const ControlActionResourceControlActionTypeEnum = {
    Activated: 'ACTIVATED',
    Deactivated: 'DEACTIVATED'
} as const;

export type ControlActionResourceControlActionTypeEnum = typeof ControlActionResourceControlActionTypeEnum[keyof typeof ControlActionResourceControlActionTypeEnum];
export const ControlActionResourceTriggeringParameterTypeEnum = {
    AirTemperature: 'AIR_TEMPERATURE',
    AirHumidity: 'AIR_HUMIDITY',
    CarbonDioxide: 'CARBON_DIOXIDE',
    SoilTemperature: 'SOIL_TEMPERATURE',
    SoilMoisture: 'SOIL_MOISTURE'
} as const;

export type ControlActionResourceTriggeringParameterTypeEnum = typeof ControlActionResourceTriggeringParameterTypeEnum[keyof typeof ControlActionResourceTriggeringParameterTypeEnum];

/**
 * 
 * @export
 * @interface CreateCompanyResource
 */
export interface CreateCompanyResource {
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyResource
     */
    'companyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCompanyResource
     */
    'taxIdentificationNumber'?: number;
}
/**
 * 
 * @export
 * @interface CreateControlActionResource
 */
export interface CreateControlActionResource {
    /**
     * 
     * @type {string}
     * @memberof CreateControlActionResource
     */
    'actuatorType'?: CreateControlActionResourceActuatorTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateControlActionResource
     */
    'controlActionType'?: CreateControlActionResourceControlActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateControlActionResource
     */
    'triggeringReason'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateControlActionResource
     */
    'triggeringParameterType'?: CreateControlActionResourceTriggeringParameterTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateControlActionResource
     */
    'triggeringMeasurementValue'?: number;
}

export const CreateControlActionResourceActuatorTypeEnum = {
    AirExtractor: 'AIR_EXTRACTOR',
    AirRecirculation: 'AIR_RECIRCULATION'
} as const;

export type CreateControlActionResourceActuatorTypeEnum = typeof CreateControlActionResourceActuatorTypeEnum[keyof typeof CreateControlActionResourceActuatorTypeEnum];
export const CreateControlActionResourceControlActionTypeEnum = {
    Activated: 'ACTIVATED',
    Deactivated: 'DEACTIVATED'
} as const;

export type CreateControlActionResourceControlActionTypeEnum = typeof CreateControlActionResourceControlActionTypeEnum[keyof typeof CreateControlActionResourceControlActionTypeEnum];
export const CreateControlActionResourceTriggeringParameterTypeEnum = {
    AirTemperature: 'AIR_TEMPERATURE',
    AirHumidity: 'AIR_HUMIDITY',
    CarbonDioxide: 'CARBON_DIOXIDE',
    SoilTemperature: 'SOIL_TEMPERATURE',
    SoilMoisture: 'SOIL_MOISTURE'
} as const;

export type CreateControlActionResourceTriggeringParameterTypeEnum = typeof CreateControlActionResourceTriggeringParameterTypeEnum[keyof typeof CreateControlActionResourceTriggeringParameterTypeEnum];

/**
 * 
 * @export
 * @interface CreateCropPhaseResource
 */
export interface CreateCropPhaseResource {
    /**
     * 
     * @type {string}
     * @memberof CreateCropPhaseResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCropPhaseResource
     */
    'phaseDuration'?: string;
    /**
     * 
     * @type {ParameterThresholds}
     * @memberof CreateCropPhaseResource
     */
    'parameterThresholds'?: ParameterThresholds;
}
/**
 * Create Crop Resource
 * @export
 * @interface CreateCropResource
 */
export interface CreateCropResource {
    /**
     * 
     * @type {string}
     * @memberof CreateCropResource
     */
    'sensorActivationFrequency'?: string;
    /**
     * 
     * @type {Array<CreateCropPhaseResource>}
     * @memberof CreateCropResource
     */
    'phases'?: Array<CreateCropPhaseResource>;
}
/**
 * 
 * @export
 * @interface CreateGrowRoomResource
 */
export interface CreateGrowRoomResource {
    /**
     * 
     * @type {string}
     * @memberof CreateGrowRoomResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGrowRoomResource
     */
    'imageUrl'?: string;
}
/**
 * Represents a single environmental measurement to be created.
 * @export
 * @interface CreateMeasurementResource
 */
export interface CreateMeasurementResource {
    /**
     * 
     * @type {string}
     * @memberof CreateMeasurementResource
     */
    'parameter'?: CreateMeasurementResourceParameterEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateMeasurementResource
     */
    'value'?: number;
}

export const CreateMeasurementResourceParameterEnum = {
    AirTemperature: 'AIR_TEMPERATURE',
    AirHumidity: 'AIR_HUMIDITY',
    CarbonDioxide: 'CARBON_DIOXIDE',
    SoilTemperature: 'SOIL_TEMPERATURE',
    SoilMoisture: 'SOIL_MOISTURE'
} as const;

export type CreateMeasurementResourceParameterEnum = typeof CreateMeasurementResourceParameterEnum[keyof typeof CreateMeasurementResourceParameterEnum];

/**
 * 
 * @export
 * @interface CreateUserResource
 */
export interface CreateUserResource {
    /**
     * 
     * @type {string}
     * @memberof CreateUserResource
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserResource
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateUserResource
     */
    'companyId'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateUserResource
     */
    'roles'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CropPhaseResource
 */
export interface CropPhaseResource {
    /**
     * 
     * @type {number}
     * @memberof CropPhaseResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CropPhaseResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CropPhaseResource
     */
    'duration'?: string;
    /**
     * 
     * @type {ParameterThresholds}
     * @memberof CropPhaseResource
     */
    'thresholds'?: ParameterThresholds;
}
/**
 * 
 * @export
 * @interface CropResource
 */
export interface CropResource {
    /**
     * 
     * @type {number}
     * @memberof CropResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CropResource
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CropResource
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CropResource
     */
    'sensorActivationFrequency'?: string;
    /**
     * 
     * @type {number}
     * @memberof CropResource
     */
    'growRoomId'?: number;
    /**
     * 
     * @type {Array<CropPhaseResource>}
     * @memberof CropResource
     */
    'phases'?: Array<CropPhaseResource>;
    /**
     * 
     * @type {CropPhaseResource}
     * @memberof CropResource
     */
    'currentPhase'?: CropPhaseResource;
    /**
     * 
     * @type {number}
     * @memberof CropResource
     */
    'totalProduction'?: number;
}
/**
 * 
 * @export
 * @interface DeviceCredentialsResource
 */
export interface DeviceCredentialsResource {
    /**
     * 
     * @type {string}
     * @memberof DeviceCredentialsResource
     */
    'thingName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceCredentialsResource
     */
    'certificatePem'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceCredentialsResource
     */
    'privateKey'?: string;
}
/**
 * 
 * @export
 * @interface FinishCropResource
 */
export interface FinishCropResource {
    /**
     * 
     * @type {number}
     * @memberof FinishCropResource
     */
    'totalProduction'?: number;
}
/**
 * 
 * @export
 * @interface GrowRoomResource
 */
export interface GrowRoomResource {
    /**
     * 
     * @type {number}
     * @memberof GrowRoomResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrowRoomResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrowRoomResource
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrowRoomResource
     */
    'hasActiveCrop'?: boolean;
    /**
     * 
     * @type {Array<MeasurementResource>}
     * @memberof GrowRoomResource
     */
    'latestMeasurements'?: Array<MeasurementResource>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof GrowRoomResource
     */
    'actuatorStates'?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof GrowRoomResource
     */
    'activeCropId'?: number;
}
/**
 * 
 * @export
 * @interface MeasurementResource
 */
export interface MeasurementResource {
    /**
     * 
     * @type {number}
     * @memberof MeasurementResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MeasurementResource
     */
    'parameter'?: MeasurementResourceParameterEnum;
    /**
     * 
     * @type {number}
     * @memberof MeasurementResource
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof MeasurementResource
     */
    'unitOfMeasurement'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementResource
     */
    'timestamp'?: string;
    /**
     * 
     * @type {number}
     * @memberof MeasurementResource
     */
    'cropPhaseId'?: number;
}

export const MeasurementResourceParameterEnum = {
    AirTemperature: 'AIR_TEMPERATURE',
    AirHumidity: 'AIR_HUMIDITY',
    CarbonDioxide: 'CARBON_DIOXIDE',
    SoilTemperature: 'SOIL_TEMPERATURE',
    SoilMoisture: 'SOIL_MOISTURE'
} as const;

export type MeasurementResourceParameterEnum = typeof MeasurementResourceParameterEnum[keyof typeof MeasurementResourceParameterEnum];

/**
 * 
 * @export
 * @interface PageCompanyResource
 */
export interface PageCompanyResource {
    /**
     * 
     * @type {number}
     * @memberof PageCompanyResource
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCompanyResource
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCompanyResource
     */
    'size'?: number;
    /**
     * 
     * @type {Array<CompanyResource>}
     * @memberof PageCompanyResource
     */
    'content'?: Array<CompanyResource>;
    /**
     * 
     * @type {number}
     * @memberof PageCompanyResource
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageCompanyResource
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageCompanyResource
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageCompanyResource
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageCompanyResource
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageCompanyResource
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageCompanyResource
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageControlActionResource
 */
export interface PageControlActionResource {
    /**
     * 
     * @type {number}
     * @memberof PageControlActionResource
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageControlActionResource
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageControlActionResource
     */
    'size'?: number;
    /**
     * 
     * @type {Array<ControlActionResource>}
     * @memberof PageControlActionResource
     */
    'content'?: Array<ControlActionResource>;
    /**
     * 
     * @type {number}
     * @memberof PageControlActionResource
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageControlActionResource
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageControlActionResource
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageControlActionResource
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageControlActionResource
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageControlActionResource
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageControlActionResource
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageCropResource
 */
export interface PageCropResource {
    /**
     * 
     * @type {number}
     * @memberof PageCropResource
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCropResource
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageCropResource
     */
    'size'?: number;
    /**
     * 
     * @type {Array<CropResource>}
     * @memberof PageCropResource
     */
    'content'?: Array<CropResource>;
    /**
     * 
     * @type {number}
     * @memberof PageCropResource
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageCropResource
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageCropResource
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageCropResource
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageCropResource
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageCropResource
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageCropResource
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageGrowRoomResource
 */
export interface PageGrowRoomResource {
    /**
     * 
     * @type {number}
     * @memberof PageGrowRoomResource
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageGrowRoomResource
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageGrowRoomResource
     */
    'size'?: number;
    /**
     * 
     * @type {Array<GrowRoomResource>}
     * @memberof PageGrowRoomResource
     */
    'content'?: Array<GrowRoomResource>;
    /**
     * 
     * @type {number}
     * @memberof PageGrowRoomResource
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageGrowRoomResource
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageGrowRoomResource
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageGrowRoomResource
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageGrowRoomResource
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageGrowRoomResource
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageGrowRoomResource
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageMeasurementResource
 */
export interface PageMeasurementResource {
    /**
     * 
     * @type {number}
     * @memberof PageMeasurementResource
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMeasurementResource
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMeasurementResource
     */
    'size'?: number;
    /**
     * 
     * @type {Array<MeasurementResource>}
     * @memberof PageMeasurementResource
     */
    'content'?: Array<MeasurementResource>;
    /**
     * 
     * @type {number}
     * @memberof PageMeasurementResource
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageMeasurementResource
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageMeasurementResource
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageMeasurementResource
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageMeasurementResource
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMeasurementResource
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageMeasurementResource
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageableObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface ParameterThresholds
 */
export interface ParameterThresholds {
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'airTemperatureMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'airTemperatureMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'airHumidityMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'airHumidityMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'carbonDioxideMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'carbonDioxideMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'soilTemperatureMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'soilTemperatureMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'soilMoistureMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof ParameterThresholds
     */
    'soilMoistureMax'?: number;
}
/**
 * 
 * @export
 * @interface PatchCompanyResource
 */
export interface PatchCompanyResource {
    /**
     * 
     * @type {string}
     * @memberof PatchCompanyResource
     */
    'companyName'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchCompanyResource
     */
    'taxIdentificationNumber'?: number;
}
/**
 * 
 * @export
 * @interface PatchGrowRoomResource
 */
export interface PatchGrowRoomResource {
    /**
     * 
     * @type {string}
     * @memberof PatchGrowRoomResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchGrowRoomResource
     */
    'imageUrl'?: string;
}
/**
 * 
 * @export
 * @interface SignInResource
 */
export interface SignInResource {
    /**
     * 
     * @type {string}
     * @memberof SignInResource
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignInResource
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignInResource
     */
    'clientType'?: SignInResourceClientTypeEnum;
}

export const SignInResourceClientTypeEnum = {
    Web: 'WEB',
    Mobile: 'MOBILE'
} as const;

export type SignInResourceClientTypeEnum = typeof SignInResourceClientTypeEnum[keyof typeof SignInResourceClientTypeEnum];

/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
}
/**
 * 
 * @export
 * @interface UserResource
 */
export interface UserResource {
    /**
     * 
     * @type {number}
     * @memberof UserResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResource
     */
    'username'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserResource
     */
    'roles'?: Array<string>;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sign in a user with the provided username and password.
         * @summary Sign in a user
         * @param {SignInResource} signInResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (signInResource: SignInResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInResource' is not null or undefined
            assertParamExists('signIn', 'signInResource', signInResource)
            const localVarPath = `/api/v1/authentication/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signs out the current user by invalidating the authentication cookie.
         * @summary Sign out a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/authentication/sign-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Sign in a user with the provided username and password.
         * @summary Sign in a user
         * @param {SignInResource} signInResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(signInResource: SignInResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticatedUserResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(signInResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.signIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Signs out the current user by invalidating the authentication cookie.
         * @summary Sign out a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signOut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signOut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.signOut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Sign in a user with the provided username and password.
         * @summary Sign in a user
         * @param {SignInResource} signInResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(signInResource: SignInResource, options?: RawAxiosRequestConfig): AxiosPromise<AuthenticatedUserResource> {
            return localVarFp.signIn(signInResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Signs out the current user by invalidating the authentication cookie.
         * @summary Sign out a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOut(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.signOut(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Sign in a user with the provided username and password.
     * @summary Sign in a user
     * @param {SignInResource} signInResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signIn(signInResource: SignInResource, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signIn(signInResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Signs out the current user by invalidating the authentication cookie.
     * @summary Sign out a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signOut(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signOut(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new company with the provided details and returns the created company resource.
         * @summary Create a new company
         * @param {CreateCompanyResource} createCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany: async (createCompanyResource: CreateCompanyResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCompanyResource' is not null or undefined
            assertParamExists('createCompany', 'createCompanyResource', createCompanyResource)
            const localVarPath = `/api/v1/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCompanyResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a company identified by the provided ID. This action will remove all associated data.
         * @summary Delete a company by ID
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: async (companyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCompany', 'companyId', companyId)
            const localVarPath = `/api/v1/companies/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of paginated companies.
         * @summary Get all companies
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCompanies: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a company by the provided ID.
         * @summary Get company by ID
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById: async (companyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyById', 'companyId', companyId)
            const localVarPath = `/api/v1/companies/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more properties of a company. Only fields provided in the request body will be updated. This action is only available to administrators.
         * @summary Patch a company
         * @param {number} companyId 
         * @param {PatchCompanyResource} patchCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCompany: async (companyId: number, patchCompanyResource: PatchCompanyResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchCompany', 'companyId', companyId)
            // verify required parameter 'patchCompanyResource' is not null or undefined
            assertParamExists('patchCompany', 'patchCompanyResource', patchCompanyResource)
            const localVarPath = `/api/v1/companies/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchCompanyResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new company with the provided details and returns the created company resource.
         * @summary Create a new company
         * @param {CreateCompanyResource} createCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompany(createCompanyResource: CreateCompanyResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompany(createCompanyResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.createCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a company identified by the provided ID. This action will remove all associated data.
         * @summary Delete a company by ID
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompany(companyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompany(companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.deleteCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of paginated companies.
         * @summary Get all companies
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCompanies(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanies(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.getAllCompanies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a company by the provided ID.
         * @summary Get company by ID
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyById(companyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyById(companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.getCompanyById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates one or more properties of a company. Only fields provided in the request body will be updated. This action is only available to administrators.
         * @summary Patch a company
         * @param {number} companyId 
         * @param {PatchCompanyResource} patchCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCompany(companyId: number, patchCompanyResource: PatchCompanyResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCompany(companyId, patchCompanyResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.patchCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * Creates a new company with the provided details and returns the created company resource.
         * @summary Create a new company
         * @param {CreateCompanyResource} createCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany(createCompanyResource: CreateCompanyResource, options?: RawAxiosRequestConfig): AxiosPromise<CompanyResource> {
            return localVarFp.createCompany(createCompanyResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a company identified by the provided ID. This action will remove all associated data.
         * @summary Delete a company by ID
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany(companyId: number, options?: RawAxiosRequestConfig): AxiosPromise<CompanyResource> {
            return localVarFp.deleteCompany(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of paginated companies.
         * @summary Get all companies
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCompanies(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CompanyResource> {
            return localVarFp.getAllCompanies(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a company by the provided ID.
         * @summary Get company by ID
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById(companyId: number, options?: RawAxiosRequestConfig): AxiosPromise<CompanyResource> {
            return localVarFp.getCompanyById(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more properties of a company. Only fields provided in the request body will be updated. This action is only available to administrators.
         * @summary Patch a company
         * @param {number} companyId 
         * @param {PatchCompanyResource} patchCompanyResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCompany(companyId: number, patchCompanyResource: PatchCompanyResource, options?: RawAxiosRequestConfig): AxiosPromise<CompanyResource> {
            return localVarFp.patchCompany(companyId, patchCompanyResource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
    /**
     * Creates a new company with the provided details and returns the created company resource.
     * @summary Create a new company
     * @param {CreateCompanyResource} createCompanyResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public createCompany(createCompanyResource: CreateCompanyResource, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).createCompany(createCompanyResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a company identified by the provided ID. This action will remove all associated data.
     * @summary Delete a company by ID
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public deleteCompany(companyId: number, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).deleteCompany(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of paginated companies.
     * @summary Get all companies
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public getAllCompanies(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getAllCompanies(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a company by the provided ID.
     * @summary Get company by ID
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public getCompanyById(companyId: number, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getCompanyById(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more properties of a company. Only fields provided in the request body will be updated. This action is only available to administrators.
     * @summary Patch a company
     * @param {number} companyId 
     * @param {PatchCompanyResource} patchCompanyResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public patchCompany(companyId: number, patchCompanyResource: PatchCompanyResource, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).patchCompany(companyId, patchCompanyResource, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ControlActionsApi - axios parameter creator
 * @export
 */
export const ControlActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds multiple control actions to the current phase of the specified crop and returns a success message.
         * @summary Add multiple control actions to the current phase of a crop
         * @param {number} cropId 
         * @param {AddControlActionsToCurrentPhaseResource} addControlActionsToCurrentPhaseResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addControlActionsToCurrentPhase: async (cropId: number, addControlActionsToCurrentPhaseResource: AddControlActionsToCurrentPhaseResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('addControlActionsToCurrentPhase', 'cropId', cropId)
            // verify required parameter 'addControlActionsToCurrentPhaseResource' is not null or undefined
            assertParamExists('addControlActionsToCurrentPhase', 'addControlActionsToCurrentPhaseResource', addControlActionsToCurrentPhaseResource)
            const localVarPath = `/api/v1/crops/{cropId}/control-actions`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addControlActionsToCurrentPhaseResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a paginated list of controlActions associated with a given crop phase ID.
         * @summary Get control actions by crop phase ID
         * @param {number} phaseId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControlActionsByCropPhaseId: async (phaseId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phaseId' is not null or undefined
            assertParamExists('getControlActionsByCropPhaseId', 'phaseId', phaseId)
            const localVarPath = `/api/v1/crop-phases/{phaseId}/control-actions`
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all controlActions for the current phase of a crop by its ID.
         * @summary Get control Actions for the current phase of a crop
         * @param {number} cropId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControlActionsForCurrentPhase: async (cropId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('getControlActionsForCurrentPhase', 'cropId', cropId)
            const localVarPath = `/api/v1/crops/{cropId}/control-actions/current`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ControlActionsApi - functional programming interface
 * @export
 */
export const ControlActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ControlActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds multiple control actions to the current phase of the specified crop and returns a success message.
         * @summary Add multiple control actions to the current phase of a crop
         * @param {number} cropId 
         * @param {AddControlActionsToCurrentPhaseResource} addControlActionsToCurrentPhaseResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addControlActionsToCurrentPhase(cropId: number, addControlActionsToCurrentPhaseResource: AddControlActionsToCurrentPhaseResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addControlActionsToCurrentPhase(cropId, addControlActionsToCurrentPhaseResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlActionsApi.addControlActionsToCurrentPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a paginated list of controlActions associated with a given crop phase ID.
         * @summary Get control actions by crop phase ID
         * @param {number} phaseId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getControlActionsByCropPhaseId(phaseId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageControlActionResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getControlActionsByCropPhaseId(phaseId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlActionsApi.getControlActionsByCropPhaseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all controlActions for the current phase of a crop by its ID.
         * @summary Get control Actions for the current phase of a crop
         * @param {number} cropId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getControlActionsForCurrentPhase(cropId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageControlActionResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getControlActionsForCurrentPhase(cropId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControlActionsApi.getControlActionsForCurrentPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ControlActionsApi - factory interface
 * @export
 */
export const ControlActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ControlActionsApiFp(configuration)
    return {
        /**
         * Adds multiple control actions to the current phase of the specified crop and returns a success message.
         * @summary Add multiple control actions to the current phase of a crop
         * @param {number} cropId 
         * @param {AddControlActionsToCurrentPhaseResource} addControlActionsToCurrentPhaseResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addControlActionsToCurrentPhase(cropId: number, addControlActionsToCurrentPhaseResource: AddControlActionsToCurrentPhaseResource, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addControlActionsToCurrentPhase(cropId, addControlActionsToCurrentPhaseResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a paginated list of controlActions associated with a given crop phase ID.
         * @summary Get control actions by crop phase ID
         * @param {number} phaseId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControlActionsByCropPhaseId(phaseId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<PageControlActionResource> {
            return localVarFp.getControlActionsByCropPhaseId(phaseId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all controlActions for the current phase of a crop by its ID.
         * @summary Get control Actions for the current phase of a crop
         * @param {number} cropId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControlActionsForCurrentPhase(cropId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<PageControlActionResource> {
            return localVarFp.getControlActionsForCurrentPhase(cropId, page, size, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ControlActionsApi - object-oriented interface
 * @export
 * @class ControlActionsApi
 * @extends {BaseAPI}
 */
export class ControlActionsApi extends BaseAPI {
    /**
     * Adds multiple control actions to the current phase of the specified crop and returns a success message.
     * @summary Add multiple control actions to the current phase of a crop
     * @param {number} cropId 
     * @param {AddControlActionsToCurrentPhaseResource} addControlActionsToCurrentPhaseResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlActionsApi
     */
    public addControlActionsToCurrentPhase(cropId: number, addControlActionsToCurrentPhaseResource: AddControlActionsToCurrentPhaseResource, options?: RawAxiosRequestConfig) {
        return ControlActionsApiFp(this.configuration).addControlActionsToCurrentPhase(cropId, addControlActionsToCurrentPhaseResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a paginated list of controlActions associated with a given crop phase ID.
     * @summary Get control actions by crop phase ID
     * @param {number} phaseId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlActionsApi
     */
    public getControlActionsByCropPhaseId(phaseId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ControlActionsApiFp(this.configuration).getControlActionsByCropPhaseId(phaseId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all controlActions for the current phase of a crop by its ID.
     * @summary Get control Actions for the current phase of a crop
     * @param {number} cropId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlActionsApi
     */
    public getControlActionsForCurrentPhase(cropId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return ControlActionsApiFp(this.configuration).getControlActionsForCurrentPhase(cropId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CropsApi - axios parameter creator
 * @export
 */
export const CropsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Advances the current phase of the specified crop to the next phase.
         * @summary Advance the crop phase
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advanceCropPhase: async (cropId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('advanceCropPhase', 'cropId', cropId)
            const localVarPath = `/api/v1/crops/{cropId}/advance-phase`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new crop associated to a grow room with sensor activation frequency and defined phases.
         * @summary Create a new crop for a grow room
         * @param {number} growRoomId 
         * @param {CreateCropResource} createCropResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCrop: async (growRoomId: number, createCropResource: CreateCropResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'growRoomId' is not null or undefined
            assertParamExists('createCrop', 'growRoomId', growRoomId)
            // verify required parameter 'createCropResource' is not null or undefined
            assertParamExists('createCrop', 'createCropResource', createCropResource)
            const localVarPath = `/api/v1/grow-rooms/{growRoomId}/crops`
                .replace(`{${"growRoomId"}}`, encodeURIComponent(String(growRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCropResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a grow room as deleted (soft delete). This action is only available to administrators.
         * @summary Delete a crop
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCrop: async (cropId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('deleteCrop', 'cropId', cropId)
            const localVarPath = `/api/v1/crops/{cropId}`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a crop as finished, sets its end date, and records the total production.
         * @summary Finish a crop and record total production
         * @param {number} cropId 
         * @param {FinishCropResource} finishCropResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishCrop: async (cropId: number, finishCropResource: FinishCropResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('finishCrop', 'cropId', cropId)
            // verify required parameter 'finishCropResource' is not null or undefined
            assertParamExists('finishCrop', 'finishCropResource', finishCropResource)
            const localVarPath = `/api/v1/crops/{cropId}/finish`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(finishCropResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a crop by its ID.
         * @summary Get crop by ID
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCropById: async (cropId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('getCropById', 'cropId', cropId)
            const localVarPath = `/api/v1/crops/{cropId}`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of crops associated with a given grow room ID.
         * @summary Get crops by grow room ID
         * @param {number} growRoomId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCropsByGrowRoomId: async (growRoomId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'growRoomId' is not null or undefined
            assertParamExists('getCropsByGrowRoomId', 'growRoomId', growRoomId)
            const localVarPath = `/api/v1/grow-rooms/{growRoomId}/crops`
                .replace(`{${"growRoomId"}}`, encodeURIComponent(String(growRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of crops that have an end date (finished crops) by grow room ID.
         * @summary Get finished crops by grow room ID
         * @param {number} growRoomId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinishedCrops: async (growRoomId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'growRoomId' is not null or undefined
            assertParamExists('getFinishedCrops', 'growRoomId', growRoomId)
            const localVarPath = `/api/v1/grow-rooms/{growRoomId}/crops/finished`
                .replace(`{${"growRoomId"}}`, encodeURIComponent(String(growRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CropsApi - functional programming interface
 * @export
 */
export const CropsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CropsApiAxiosParamCreator(configuration)
    return {
        /**
         * Advances the current phase of the specified crop to the next phase.
         * @summary Advance the crop phase
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advanceCropPhase(cropId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advanceCropPhase(cropId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CropsApi.advanceCropPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new crop associated to a grow room with sensor activation frequency and defined phases.
         * @summary Create a new crop for a grow room
         * @param {number} growRoomId 
         * @param {CreateCropResource} createCropResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCrop(growRoomId: number, createCropResource: CreateCropResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CropResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCrop(growRoomId, createCropResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CropsApi.createCrop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks a grow room as deleted (soft delete). This action is only available to administrators.
         * @summary Delete a crop
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCrop(cropId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCrop(cropId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CropsApi.deleteCrop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks a crop as finished, sets its end date, and records the total production.
         * @summary Finish a crop and record total production
         * @param {number} cropId 
         * @param {FinishCropResource} finishCropResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishCrop(cropId: number, finishCropResource: FinishCropResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishCrop(cropId, finishCropResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CropsApi.finishCrop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a crop by its ID.
         * @summary Get crop by ID
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCropById(cropId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CropResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCropById(cropId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CropsApi.getCropById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of crops associated with a given grow room ID.
         * @summary Get crops by grow room ID
         * @param {number} growRoomId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCropsByGrowRoomId(growRoomId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CropResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCropsByGrowRoomId(growRoomId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CropsApi.getCropsByGrowRoomId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of crops that have an end date (finished crops) by grow room ID.
         * @summary Get finished crops by grow room ID
         * @param {number} growRoomId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinishedCrops(growRoomId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CropResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinishedCrops(growRoomId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CropsApi.getFinishedCrops']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CropsApi - factory interface
 * @export
 */
export const CropsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CropsApiFp(configuration)
    return {
        /**
         * Advances the current phase of the specified crop to the next phase.
         * @summary Advance the crop phase
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advanceCropPhase(cropId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.advanceCropPhase(cropId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new crop associated to a grow room with sensor activation frequency and defined phases.
         * @summary Create a new crop for a grow room
         * @param {number} growRoomId 
         * @param {CreateCropResource} createCropResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCrop(growRoomId: number, createCropResource: CreateCropResource, options?: RawAxiosRequestConfig): AxiosPromise<CropResource> {
            return localVarFp.createCrop(growRoomId, createCropResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a grow room as deleted (soft delete). This action is only available to administrators.
         * @summary Delete a crop
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCrop(cropId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCrop(cropId, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a crop as finished, sets its end date, and records the total production.
         * @summary Finish a crop and record total production
         * @param {number} cropId 
         * @param {FinishCropResource} finishCropResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishCrop(cropId: number, finishCropResource: FinishCropResource, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.finishCrop(cropId, finishCropResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a crop by its ID.
         * @summary Get crop by ID
         * @param {number} cropId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCropById(cropId: number, options?: RawAxiosRequestConfig): AxiosPromise<CropResource> {
            return localVarFp.getCropById(cropId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of crops associated with a given grow room ID.
         * @summary Get crops by grow room ID
         * @param {number} growRoomId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCropsByGrowRoomId(growRoomId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CropResource> {
            return localVarFp.getCropsByGrowRoomId(growRoomId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of crops that have an end date (finished crops) by grow room ID.
         * @summary Get finished crops by grow room ID
         * @param {number} growRoomId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinishedCrops(growRoomId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CropResource> {
            return localVarFp.getFinishedCrops(growRoomId, page, size, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CropsApi - object-oriented interface
 * @export
 * @class CropsApi
 * @extends {BaseAPI}
 */
export class CropsApi extends BaseAPI {
    /**
     * Advances the current phase of the specified crop to the next phase.
     * @summary Advance the crop phase
     * @param {number} cropId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CropsApi
     */
    public advanceCropPhase(cropId: number, options?: RawAxiosRequestConfig) {
        return CropsApiFp(this.configuration).advanceCropPhase(cropId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new crop associated to a grow room with sensor activation frequency and defined phases.
     * @summary Create a new crop for a grow room
     * @param {number} growRoomId 
     * @param {CreateCropResource} createCropResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CropsApi
     */
    public createCrop(growRoomId: number, createCropResource: CreateCropResource, options?: RawAxiosRequestConfig) {
        return CropsApiFp(this.configuration).createCrop(growRoomId, createCropResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a grow room as deleted (soft delete). This action is only available to administrators.
     * @summary Delete a crop
     * @param {number} cropId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CropsApi
     */
    public deleteCrop(cropId: number, options?: RawAxiosRequestConfig) {
        return CropsApiFp(this.configuration).deleteCrop(cropId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a crop as finished, sets its end date, and records the total production.
     * @summary Finish a crop and record total production
     * @param {number} cropId 
     * @param {FinishCropResource} finishCropResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CropsApi
     */
    public finishCrop(cropId: number, finishCropResource: FinishCropResource, options?: RawAxiosRequestConfig) {
        return CropsApiFp(this.configuration).finishCrop(cropId, finishCropResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a crop by its ID.
     * @summary Get crop by ID
     * @param {number} cropId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CropsApi
     */
    public getCropById(cropId: number, options?: RawAxiosRequestConfig) {
        return CropsApiFp(this.configuration).getCropById(cropId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of crops associated with a given grow room ID.
     * @summary Get crops by grow room ID
     * @param {number} growRoomId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CropsApi
     */
    public getCropsByGrowRoomId(growRoomId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return CropsApiFp(this.configuration).getCropsByGrowRoomId(growRoomId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of crops that have an end date (finished crops) by grow room ID.
     * @summary Get finished crops by grow room ID
     * @param {number} growRoomId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CropsApi
     */
    public getFinishedCrops(growRoomId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return CropsApiFp(this.configuration).getFinishedCrops(growRoomId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GrowRoomsApi - axios parameter creator
 * @export
 */
export const GrowRoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new grow room and returns the credentials for its IoT device. These credentials should be downloaded immediately as they are not stored.
         * @summary Create a new grow room and provision its IoT device
         * @param {number} companyId 
         * @param {CreateGrowRoomResource} createGrowRoomResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGrowRoom: async (companyId: number, createGrowRoomResource: CreateGrowRoomResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createGrowRoom', 'companyId', companyId)
            // verify required parameter 'createGrowRoomResource' is not null or undefined
            assertParamExists('createGrowRoom', 'createGrowRoomResource', createGrowRoomResource)
            const localVarPath = `/api/v1/grow-rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGrowRoomResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a grow room as deleted (soft delete). This action is only available to administrators.
         * @summary Delete a grow room
         * @param {number} growRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrowRoom: async (growRoomId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'growRoomId' is not null or undefined
            assertParamExists('deleteGrowRoom', 'growRoomId', growRoomId)
            const localVarPath = `/api/v1/grow-rooms/{growRoomId}`
                .replace(`{${"growRoomId"}}`, encodeURIComponent(String(growRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a grow room by its ID.
         * @summary Get a grow room by ID
         * @param {number} growRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrowRoomById: async (growRoomId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'growRoomId' is not null or undefined
            assertParamExists('getGrowRoomById', 'growRoomId', growRoomId)
            const localVarPath = `/api/v1/grow-rooms/{growRoomId}`
                .replace(`{${"growRoomId"}}`, encodeURIComponent(String(growRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of grow rooms by the provided company ID.
         * @summary Get grow rooms by company ID
         * @param {number} companyId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrowRoomsByCompanyId: async (companyId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getGrowRoomsByCompanyId', 'companyId', companyId)
            const localVarPath = `/api/v1/companies/{companyId}/grow-rooms`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more properties of a grow room. Only fields provided in the request body will be updated. This action is only available to administrators.
         * @summary Patch a grow room
         * @param {number} growRoomId 
         * @param {PatchGrowRoomResource} patchGrowRoomResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGrowRoom: async (growRoomId: number, patchGrowRoomResource: PatchGrowRoomResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'growRoomId' is not null or undefined
            assertParamExists('patchGrowRoom', 'growRoomId', growRoomId)
            // verify required parameter 'patchGrowRoomResource' is not null or undefined
            assertParamExists('patchGrowRoom', 'patchGrowRoomResource', patchGrowRoomResource)
            const localVarPath = `/api/v1/grow-rooms/{growRoomId}`
                .replace(`{${"growRoomId"}}`, encodeURIComponent(String(growRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchGrowRoomResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GrowRoomsApi - functional programming interface
 * @export
 */
export const GrowRoomsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GrowRoomsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new grow room and returns the credentials for its IoT device. These credentials should be downloaded immediately as they are not stored.
         * @summary Create a new grow room and provision its IoT device
         * @param {number} companyId 
         * @param {CreateGrowRoomResource} createGrowRoomResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGrowRoom(companyId: number, createGrowRoomResource: CreateGrowRoomResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceCredentialsResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGrowRoom(companyId, createGrowRoomResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GrowRoomsApi.createGrowRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Marks a grow room as deleted (soft delete). This action is only available to administrators.
         * @summary Delete a grow room
         * @param {number} growRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGrowRoom(growRoomId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGrowRoom(growRoomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GrowRoomsApi.deleteGrowRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a grow room by its ID.
         * @summary Get a grow room by ID
         * @param {number} growRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrowRoomById(growRoomId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrowRoomResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGrowRoomById(growRoomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GrowRoomsApi.getGrowRoomById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of grow rooms by the provided company ID.
         * @summary Get grow rooms by company ID
         * @param {number} companyId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrowRoomsByCompanyId(companyId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageGrowRoomResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGrowRoomsByCompanyId(companyId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GrowRoomsApi.getGrowRoomsByCompanyId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates one or more properties of a grow room. Only fields provided in the request body will be updated. This action is only available to administrators.
         * @summary Patch a grow room
         * @param {number} growRoomId 
         * @param {PatchGrowRoomResource} patchGrowRoomResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchGrowRoom(growRoomId: number, patchGrowRoomResource: PatchGrowRoomResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrowRoomResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchGrowRoom(growRoomId, patchGrowRoomResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GrowRoomsApi.patchGrowRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GrowRoomsApi - factory interface
 * @export
 */
export const GrowRoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GrowRoomsApiFp(configuration)
    return {
        /**
         * Creates a new grow room and returns the credentials for its IoT device. These credentials should be downloaded immediately as they are not stored.
         * @summary Create a new grow room and provision its IoT device
         * @param {number} companyId 
         * @param {CreateGrowRoomResource} createGrowRoomResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGrowRoom(companyId: number, createGrowRoomResource: CreateGrowRoomResource, options?: RawAxiosRequestConfig): AxiosPromise<DeviceCredentialsResource> {
            return localVarFp.createGrowRoom(companyId, createGrowRoomResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a grow room as deleted (soft delete). This action is only available to administrators.
         * @summary Delete a grow room
         * @param {number} growRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrowRoom(growRoomId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGrowRoom(growRoomId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a grow room by its ID.
         * @summary Get a grow room by ID
         * @param {number} growRoomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrowRoomById(growRoomId: number, options?: RawAxiosRequestConfig): AxiosPromise<GrowRoomResource> {
            return localVarFp.getGrowRoomById(growRoomId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of grow rooms by the provided company ID.
         * @summary Get grow rooms by company ID
         * @param {number} companyId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrowRoomsByCompanyId(companyId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<PageGrowRoomResource> {
            return localVarFp.getGrowRoomsByCompanyId(companyId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more properties of a grow room. Only fields provided in the request body will be updated. This action is only available to administrators.
         * @summary Patch a grow room
         * @param {number} growRoomId 
         * @param {PatchGrowRoomResource} patchGrowRoomResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGrowRoom(growRoomId: number, patchGrowRoomResource: PatchGrowRoomResource, options?: RawAxiosRequestConfig): AxiosPromise<GrowRoomResource> {
            return localVarFp.patchGrowRoom(growRoomId, patchGrowRoomResource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GrowRoomsApi - object-oriented interface
 * @export
 * @class GrowRoomsApi
 * @extends {BaseAPI}
 */
export class GrowRoomsApi extends BaseAPI {
    /**
     * Creates a new grow room and returns the credentials for its IoT device. These credentials should be downloaded immediately as they are not stored.
     * @summary Create a new grow room and provision its IoT device
     * @param {number} companyId 
     * @param {CreateGrowRoomResource} createGrowRoomResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrowRoomsApi
     */
    public createGrowRoom(companyId: number, createGrowRoomResource: CreateGrowRoomResource, options?: RawAxiosRequestConfig) {
        return GrowRoomsApiFp(this.configuration).createGrowRoom(companyId, createGrowRoomResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a grow room as deleted (soft delete). This action is only available to administrators.
     * @summary Delete a grow room
     * @param {number} growRoomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrowRoomsApi
     */
    public deleteGrowRoom(growRoomId: number, options?: RawAxiosRequestConfig) {
        return GrowRoomsApiFp(this.configuration).deleteGrowRoom(growRoomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a grow room by its ID.
     * @summary Get a grow room by ID
     * @param {number} growRoomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrowRoomsApi
     */
    public getGrowRoomById(growRoomId: number, options?: RawAxiosRequestConfig) {
        return GrowRoomsApiFp(this.configuration).getGrowRoomById(growRoomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of grow rooms by the provided company ID.
     * @summary Get grow rooms by company ID
     * @param {number} companyId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrowRoomsApi
     */
    public getGrowRoomsByCompanyId(companyId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return GrowRoomsApiFp(this.configuration).getGrowRoomsByCompanyId(companyId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more properties of a grow room. Only fields provided in the request body will be updated. This action is only available to administrators.
     * @summary Patch a grow room
     * @param {number} growRoomId 
     * @param {PatchGrowRoomResource} patchGrowRoomResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrowRoomsApi
     */
    public patchGrowRoom(growRoomId: number, patchGrowRoomResource: PatchGrowRoomResource, options?: RawAxiosRequestConfig) {
        return GrowRoomsApiFp(this.configuration).patchGrowRoom(growRoomId, patchGrowRoomResource, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeasurementsApi - axios parameter creator
 * @export
 */
export const MeasurementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds multiple measurements to the current phase of the specified crop and returns a success message.
         * @summary Add multiple measurements to the current phase of a crop
         * @param {number} cropId 
         * @param {AddMeasurementsToCurrentPhaseResource} addMeasurementsToCurrentPhaseResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMeasurementsToCurrentPhase: async (cropId: number, addMeasurementsToCurrentPhaseResource: AddMeasurementsToCurrentPhaseResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('addMeasurementsToCurrentPhase', 'cropId', cropId)
            // verify required parameter 'addMeasurementsToCurrentPhaseResource' is not null or undefined
            assertParamExists('addMeasurementsToCurrentPhase', 'addMeasurementsToCurrentPhaseResource', addMeasurementsToCurrentPhaseResource)
            const localVarPath = `/api/v1/crops/{cropId}/measurements`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMeasurementsToCurrentPhaseResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a paginated list of measurements associated with a given crop phase ID.
         * @summary Get measurements by crop phase ID
         * @param {number} phaseId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementsByCropPhaseId: async (phaseId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phaseId' is not null or undefined
            assertParamExists('getMeasurementsByCropPhaseId', 'phaseId', phaseId)
            const localVarPath = `/api/v1/crop-phases/{phaseId}/measurements`
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all measurements for the current phase of a crop by its ID.
         * @summary Get measurements for the current phase of a crop
         * @param {number} cropId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementsForCurrentPhase: async (cropId: number, page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cropId' is not null or undefined
            assertParamExists('getMeasurementsForCurrentPhase', 'cropId', cropId)
            const localVarPath = `/api/v1/crops/{cropId}/measurements/current`
                .replace(`{${"cropId"}}`, encodeURIComponent(String(cropId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeasurementsApi - functional programming interface
 * @export
 */
export const MeasurementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeasurementsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds multiple measurements to the current phase of the specified crop and returns a success message.
         * @summary Add multiple measurements to the current phase of a crop
         * @param {number} cropId 
         * @param {AddMeasurementsToCurrentPhaseResource} addMeasurementsToCurrentPhaseResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMeasurementsToCurrentPhase(cropId: number, addMeasurementsToCurrentPhaseResource: AddMeasurementsToCurrentPhaseResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMeasurementsToCurrentPhase(cropId, addMeasurementsToCurrentPhaseResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeasurementsApi.addMeasurementsToCurrentPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a paginated list of measurements associated with a given crop phase ID.
         * @summary Get measurements by crop phase ID
         * @param {number} phaseId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeasurementsByCropPhaseId(phaseId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CropResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeasurementsByCropPhaseId(phaseId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeasurementsApi.getMeasurementsByCropPhaseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all measurements for the current phase of a crop by its ID.
         * @summary Get measurements for the current phase of a crop
         * @param {number} cropId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeasurementsForCurrentPhase(cropId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMeasurementResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeasurementsForCurrentPhase(cropId, page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeasurementsApi.getMeasurementsForCurrentPhase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeasurementsApi - factory interface
 * @export
 */
export const MeasurementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeasurementsApiFp(configuration)
    return {
        /**
         * Adds multiple measurements to the current phase of the specified crop and returns a success message.
         * @summary Add multiple measurements to the current phase of a crop
         * @param {number} cropId 
         * @param {AddMeasurementsToCurrentPhaseResource} addMeasurementsToCurrentPhaseResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMeasurementsToCurrentPhase(cropId: number, addMeasurementsToCurrentPhaseResource: AddMeasurementsToCurrentPhaseResource, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addMeasurementsToCurrentPhase(cropId, addMeasurementsToCurrentPhaseResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a paginated list of measurements associated with a given crop phase ID.
         * @summary Get measurements by crop phase ID
         * @param {number} phaseId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementsByCropPhaseId(phaseId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<CropResource> {
            return localVarFp.getMeasurementsByCropPhaseId(phaseId, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all measurements for the current phase of a crop by its ID.
         * @summary Get measurements for the current phase of a crop
         * @param {number} cropId 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementsForCurrentPhase(cropId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<PageMeasurementResource> {
            return localVarFp.getMeasurementsForCurrentPhase(cropId, page, size, sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeasurementsApi - object-oriented interface
 * @export
 * @class MeasurementsApi
 * @extends {BaseAPI}
 */
export class MeasurementsApi extends BaseAPI {
    /**
     * Adds multiple measurements to the current phase of the specified crop and returns a success message.
     * @summary Add multiple measurements to the current phase of a crop
     * @param {number} cropId 
     * @param {AddMeasurementsToCurrentPhaseResource} addMeasurementsToCurrentPhaseResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementsApi
     */
    public addMeasurementsToCurrentPhase(cropId: number, addMeasurementsToCurrentPhaseResource: AddMeasurementsToCurrentPhaseResource, options?: RawAxiosRequestConfig) {
        return MeasurementsApiFp(this.configuration).addMeasurementsToCurrentPhase(cropId, addMeasurementsToCurrentPhaseResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a paginated list of measurements associated with a given crop phase ID.
     * @summary Get measurements by crop phase ID
     * @param {number} phaseId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementsApi
     */
    public getMeasurementsByCropPhaseId(phaseId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return MeasurementsApiFp(this.configuration).getMeasurementsByCropPhaseId(phaseId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all measurements for the current phase of a crop by its ID.
     * @summary Get measurements for the current phase of a crop
     * @param {number} cropId 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementsApi
     */
    public getMeasurementsForCurrentPhase(cropId: number, page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return MeasurementsApiFp(this.configuration).getMeasurementsForCurrentPhase(cropId, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new user associated with a specific company. This endpoint is for admin use only.
         * @summary Create a new user for a company
         * @param {CreateUserResource} createUserResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserResource: CreateUserResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserResource' is not null or undefined
            assertParamExists('createUser', 'createUserResource', createUserResource)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the user with the given id. This endpoint is for admin use only.
         * @summary Delete a user by id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the users available in the system.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the user with the given id.
         * @summary Get user by id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserById', 'userId', userId)
            const localVarPath = `/api/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new user associated with a specific company. This endpoint is for admin use only.
         * @summary Create a new user for a company
         * @param {CreateUserResource} createUserResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserResource: CreateUserResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserResource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the user with the given id. This endpoint is for admin use only.
         * @summary Delete a user by id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all the users available in the system.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the user with the given id.
         * @summary Get user by id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Creates a new user associated with a specific company. This endpoint is for admin use only.
         * @summary Create a new user for a company
         * @param {CreateUserResource} createUserResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserResource: CreateUserResource, options?: RawAxiosRequestConfig): AxiosPromise<UserResource> {
            return localVarFp.createUser(createUserResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the user with the given id. This endpoint is for admin use only.
         * @summary Delete a user by id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserResource> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the users available in the system.
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResource>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the user with the given id.
         * @summary Get user by id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserResource> {
            return localVarFp.getUserById(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Creates a new user associated with a specific company. This endpoint is for admin use only.
     * @summary Create a new user for a company
     * @param {CreateUserResource} createUserResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(createUserResource: CreateUserResource, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(createUserResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the user with the given id. This endpoint is for admin use only.
     * @summary Delete a user by id
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the users available in the system.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAllUsers(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the user with the given id.
     * @summary Get user by id
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserById(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



